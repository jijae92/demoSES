name: Tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run unit tests
        run: |
          pytest tests/ -m "unit" --cov=src --cov-report=term-missing --cov-report=xml --cov-report=html -v

      - name: Run integration tests
        run: |
          pytest tests/ -m "integration" --cov=src --cov-append --cov-report=term-missing --cov-report=xml --cov-report=html -v

      - name: Run smoke tests
        run: |
          pytest tests/ -m "smoke" --cov=src --cov-append --cov-report=term-missing --cov-report=xml --cov-report=html -v

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports-${{ matrix.python-version }}
          path: |
            htmlcov/
            coverage.xml
          retention-days: 30

      - name: Coverage summary
        if: always()
        run: |
          if [ -f coverage.xml ]; then
            echo "Coverage report generated successfully"
            pip install coverage
            coverage report --skip-covered
          else
            echo "No coverage report found"
          fi

  test-all-unmarked:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run all tests (including unmarked)
        run: |
          pytest tests/ --cov=src --cov-report=term-missing -v

  workflow-smoke:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Workflow smoke tests
        run: |
          pytest tests/test_workflow_smoke.py -m "smoke" --cov=src --cov-append --cov-report=term-missing -v

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install development dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Check code formatting with black
        if: always()
        run: |
          black --check src/ tests/ bin/ || echo "::warning::Code formatting issues found. Run 'black src/ tests/ bin/' locally."

      - name: Lint with ruff
        if: always()
        run: |
          ruff check src/ tests/ bin/ || echo "::warning::Linting issues found. Run 'ruff check --fix src/ tests/ bin/' locally."

      - name: Type check with mypy
        if: always()
        run: |
          mypy src/ --ignore-missing-imports || echo "::warning::Type checking issues found."
